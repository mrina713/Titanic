}
getData()
getData <- function( ) {
query <- "
SELECT  *
from liquidity.master_data
where region = "Catalunya" "
query <- gsub("\n"," ",query)
query <- gsub("\t"," ",query)
data <- getDataRedshift(query, FALSE)
data.table(data)
}
getData()
getDataRedshift <- function (query, encoding) {
require(RJDBC)
driver <- JDBC("com.amazon.redshift.jdbc41.Driver", "RedshiftJDBC41-1.2.1.1001.jar", identifier.quote="`") #asegurarse de que el driver esta en el working directory
url <- "jdbc:redshift://bi-events.cypuotd5so4b.eu-west-1.redshift.amazonaws.com:5439/app_db?user=bicornerjob&password=lIf8o8&*HE#5"
con <- dbConnect(driver, url)
result <- dbGetQuery(con, query)
if (encoding == TRUE) Encoding(result$companyname) <-'UTF-8'
dbDisconnect(con)
rm(con)
return(result)
}
getData <- function( ) {
query <- "
SELECT  *
from liquidity.master_data
where region = 'Catalunya' "
query <- gsub("\n"," ",query)
query <- gsub("\t"," ",query)
data <- getDataRedshift(query, FALSE)
data.table(data)
}
getData()
getData <- function( ) {
query <- "
SELECT  *
from liquidity.master_data "
query <- gsub("\n"," ",query)
query <- gsub("\t"," ",query)
data <- getDataRedshift(query, FALSE)
data.table(data)
}
getData()
getDataRedshift <- function (query, encoding) {
require(RJDBC)
driver <- JDBC("com.amazon.redshift.jdbc41.Driver", "RedshiftJDBC41-1.2.1.1001.jar", identifier.quote="`") #asegurarse de que el driver esta en el working directory
url <- "jdbc:redshift://bi-events.cypuotd5so4b.eu-west-1.redshift.amazonaws.com:5439/app_db?user=bicornerjob&password=lIf8o8&*HE#5"
con <- dbConnect(driver, url)
result <- dbGetQuery(con, query)
if (encoding == TRUE) Encoding(result$companyname) <-'UTF-8'
dbDisconnect(con)
rm(con)
return(result)
}
getData <- function( ) {
query <- "
SELECT  *
from liquidity.master_data "
query <- gsub("\n"," ",query)
query <- gsub("\t"," ",query)
data <- getDataRedshift(query, FALSE)
data.table(data)
}
getData()
getDataSql <- function (query, encoding) {
require(RJDBC)
driver <- JDBC("com.amazon.redshift.jdbc41.Driver", "RedshiftJDBC41-1.2.1.1001.jar", identifier.quote="`") #asegurarse de que el driver esta en el working directory
url <- "jdbc:redshift://bi-events.cypuotd5so4b.eu-west-1.redshift.amazonaws.com:5439/app_db?user=tableau&password=10X20son200!"
con <- dbConnect(driver, url)
result <- dbGetQuery(con, query)
if (encoding == TRUE) Encoding(result$companyname) <-'UTF-8'
dbDisconnect(con)
rm(con)
return(result)
}
getData()
library("tidyverse")
setwd("~/Titanic")
train <- fread("Data/train.csv")
library("data.table")
setwd("~/Titanic")
train <- fread("Data/train.csv")
test <- fread("Data/test.csv")
dim(train)
str(train)
train <- fread("Data/train.csv", stringsAsFactors= TRUE)
test <- fread("Data/test.csv", stringsAsFactors= TRUE)
dim(train)
str(train)
summarize(train)
train
summarize(train)
summary(train)
boxplot(train$Survived)
ggplot(train, aes(x=as.factor(Survived)) +
geom_bar(fill="slateblue", alpha=0.2)
ggplot(train, aes(x=as.factor(Survived))) +
geom_bar(fill="slateblue", alpha=0.2)
ggplot(train, aes(x=as.factor(Survived))) +
geom_bar(fill=Sex, alpha=0.2)
ggplot(train, aes(x=as.factor(Survived))) +
geom_bar(fill=Sex, alpha=0.2)
ggplot(train, aes(x=as.factor(Survived))) +
geom_bar(fill="slateblue", alpha=0.6)
ggplot(train, aes(x=as.factor(Survived))) +
geom_bar(fill="slateblue", alpha=0.6, "stack")
ggplot(train, aes(x=as.factor(Survived))) +
geom_bar(fill=Survived, alpha=0.6)
ggplot(train, aes(x=as.factor(Survived), color = "Survived")) +
geom_bar(fill="slateblue", alpha=0.6)
ggplot(train, aes(x=as.factor(Survived), fill = "Survived")) +
geom_bar(fill="slateblue", alpha=0.6)
ggplot(train, aes(x=as.factor(Survived), fill = "Survived")) +
geom_bar( alpha=0.6)
ggplot(train, aes(x=as.factor(Survived), fill = Survived)) +
geom_bar( alpha=0.6)
ggplot(train, aes(x=as.factor(Survived), fill = as.factor(Survived))) +
geom_bar( alpha=0.6)
is.integer( train )
apply(train , is.integer)
apply( is.integer, train )
rapply( is.integer, train )
rapply( train , is.integer)
train[ , rapply( train , is.integer)]
if(rapply( train , is.integer)) a
if(rapply( train , is.integer)) "a"
rapply( train , is.integer)
which(rapply( train , is.integer) )
which(rapply( train , is.integer) )[-1]
int_to_factor <- which(rapply( train , is.integer) )[-1]
train[, lapply(.SD, factor), .SDcols=int_to_factor]
train[ , int_to_factor] <- train[, lapply(.SD, factor), .SDcols=int_to_factor]
str(train)
ggplot(train, aes(x=Survived, fill = Survived )) +
geom_bar( alpha=0.6)
ggplot(train, aes(x=Survived, fill = Sex )) +
geom_bar( alpha=0.6)
ggplot(data = train) +
geom_bar( mapping = aes(x = factor(Survived), fill = factor(Sex) ), position = "fill") +
ggtitle("Sex relevance to Surviving") +
ylab("Sex")
ggplot(data = train) +
geom_bar( mapping = aes(x = Survived, fill = Sex ), position = "fill") +
ggtitle("Sex relevance to Surviving") +
ylab("Sex")
ggplot(data = train) +
geom_bar( mapping = aes_string(x = "Survived", fill = "Sex" ), position = "fill") +
ggtitle("Sex relevance to Surviving") +
ylab("Sex")
ggplot(data = train) +
geom_bar( mapping = aes_string(x = "Survived", fill = "Sex" ), position = "fill") +
ggtitle("Sex relevance to Surviving") +
ylab("Sex")
shiny::runApp('ShinyApp/EDA_TITANIC')
install.packages("shinydashboard")
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
ddply(train, "Survived", summarise, rating.mean=mean(Age, na.rm= T))
ddply(train, "Survived", summarise, rating.mean=mean(Age, na.rm= T))
library(plyr)
ddply(train, "Survived", summarise, rating.mean=mean(Age, na.rm= T))
ddply(train, .(Survived), numcolwise(mean, na.rm= T))
train
ddply(train, .(Survived), numcolwise(mean, na.rm= T))
ggplot(data = train) +
geom_point(mapping = aes_string(x = "Pclass",
y = "Age",
color = "Survived" ))
mean_train <- ddply(train, .(Survived), numcolwise(mean( na.rm= T)))
mean_train <- ddply(train, .(Survived), numcolwise(mean, na.rm= T))
mean_train
mean_train <- ddply(train, .(Survived), numcolwise(mean, na.rm= T))
ggplot(data = train, aes(x = Age, fill = Survived )) +
ggtitle("Age relevance to Surviving") +
ylab("Survivors") +
geom_histogram(binwidth = 10, position = "identity", alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = rating.mean,  colour = factor(Survived)),
linetype="dashed", size=1)
mean_train[[Survived]]
mean_train[["Age"]]
ggplot(data = train, aes(x = Age, fill = Survived )) +
ggtitle("Age relevance to Surviving") +
ylab("Survivors") +
geom_histogram(binwidth = 10, position = "identity", alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = mean_train[["Age"]],  colour = factor(Survived)),
linetype="dashed", size=1)
ggplot(data = train, aes(x = Age, fill = Survived )) +
ggtitle("Age relevance to Surviving") +
ylab("Survivors") +
geom_histogram(binwidth = 10, position = "identity", alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = mean_train[["Age"]],  colour = Survived),
linetype="dashed", size=1)
for(i in seq_along(cols(mean_train)))
print(i)
seq_along(cols(mean_train))
mean_train
cols(mean_train)
seq_along(mean_train)
col <- names(mean_train)[i]
metric <- "Age"
ggplot(data = train, aes_string(x = metric, fill = Survived )) +
ggtitle(paste(metric, " relevance to Surviving")) +
ylab("Survivors") +
geom_histogram(binwidth = 10, position = "identity", alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train[[metric]], aes(xintercept = mean_train[[metric]],  colour = Survived),
linetype="dashed", size=1)
ggplot(data = train, aes_string(x = metric, fill = Survived )) +
ggtitle(paste(metric, " relevance to Surviving")) +
ylab("Survivors") +
geom_histogram(binwidth = 10, position = "identity", alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train[[metric]], aes(xintercept = mean_train[[metric]],  colour = Survived),
linetype="dashed", size=1)
ggplot(data = train, aes_string(x = metric, fill = "Survived" )) +
ggtitle(paste(metric, " relevance to Surviving")) +
ylab("Survivors") +
geom_histogram(binwidth = 10, position = "identity", alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train[[metric]], aes(xintercept = mean_train[[metric]],  colour = Survived),
linetype="dashed", size=1)
paste(metric, " relevance to Surviving")
ggplot(data = train, aes_string(x = metric, fill = "Survived" )) +
ggtitle(paste(metric, "relevance to Surviving")) +
ylab("Survivors") +
geom_histogram(binwidth = 10, position = "identity", alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = mean_train[[metric]],  colour = Survived),
linetype="dashed", size=1)
metric <- "Pclass"
ggplot(data = train, aes_string(x = metric, fill = "Survived" )) +
ggtitle(paste(metric, "relevance to Surviving")) +
ylab("Survivors") +
geom_histogram(binwidth = 10, position = "identity", alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = mean_train[[metric]],  colour = Survived),
linetype="dashed", size=1)
names(mean_train)
mean_train[-"Survived"]
mean_train["Survived"]
mean_train[, -"Survived"]
mean_train[, -c("Survived")]
mean_train[ , "Survived"]
mean_train[-1]
mean_train["Survived"]
mean_train[-"Survived"]
mean_train[,-"Survived"]
mean_train[-1]
metric <- "Fare"
ggplot(data = train, aes_string(x = metric, fill = "Survived" )) +
ggtitle(paste(metric, "relevance to Surviving")) +
ylab("Survivors") +
geom_histogram(binwidth = 10, position = "identity", alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = mean_train[[metric]],  colour = Survived),
linetype="dashed", size=1)
ggplot(data = train, aes(x = metric, fill = Survived )) +
geom_density(alpha = .5, na.rm=TRUE) +
geom_vline(data = ctrain_age, aes(xintercept = rating.mean,  colour = Survived ),
linetype="dashed", size=1)
ggplot(data = train, aes(x = metric, fill = Survived )) +
geom_density(alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = rating.mean,  colour = Survived ),
linetype="dashed", size=1)
ggplot(data = train, aes(x = metric, fill = Survived )) +
geom_density(alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = mean_train[[metric]],  colour = Survived ),
linetype="dashed", size=1)
mean_train <- ddply(train, .(Survived), numcolwise(mean, na.rm= T))
for(i in seq_along(mean_train[-1]) ) {
metric <- names(mean_train)[i]
# Histogram
ggplot(data = train, aes_string(x = metric, fill = "Survived" )) +
ggtitle(paste(metric, "relevance to Surviving")) +
ylab("Survivors") +
geom_histogram(binwidth = 10, position = "identity", alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = mean_train[[metric]],  colour = Survived),
linetype="dashed", size=1)
# Density
ggplot(data = train, aes(x = metric, fill = Survived )) +
geom_density(alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = mean_train[[metric]],  colour = Survived ),
linetype="dashed", size=1)
}
mean_train <- ddply(train, .(Survived), numcolwise(mean, na.rm= T))
for(i in seq_along(mean_train[-1]) ) {
metric <- names(mean_train)[i]
# Histogram
ggplot(data = train, aes_string(x = metric, fill = "Survived" )) +
ggtitle(paste(metric, "relevance to Surviving")) +
ylab("Survivors") +
geom_histogram(binwidth = 10, position = "identity", alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = mean_train[[metric]],  colour = Survived),
linetype="dashed", size=1)
# Density
ggplot(data = train, aes(x = metric, fill = Survived )) +
geom_density(alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = mean_train[[metric]],  colour = Survived ),
linetype="dashed", size=1)
}
i
ggplot(data = train, aes_string(x = metric, fill = "Survived" )) +
ggtitle(paste(metric, "relevance to Surviving")) +
ylab("Survivors") +
geom_histogram(binwidth = 10, position = "identity", alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = mean_train[[metric]],  colour = Survived),
linetype="dashed", size=1)
ggplot(data = train, aes(x = metric, fill = Survived )) +
geom_density(alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = mean_train[[metric]],  colour = Survived ),
linetype="dashed", size=1)
i=1
ggplot(data = train, aes_string(x = metric, fill = "Survived" )) +
ggtitle(paste(metric, "relevance to Surviving")) +
ylab("Survivors") +
geom_histogram(binwidth = 10, position = "identity", alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = mean_train[[metric]],  colour = Survived),
linetype="dashed", size=1)
ggplot(data = train, aes(x = metric, fill = Survived )) +
geom_density(alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = mean_train[[metric]],  colour = Survived ),
linetype="dashed", size=1)
ggplot(data = train, aes_string(x = metric, fill = "Survived" )) +
ggtitle(paste(metric, "relevance to Surviving")) +
ylab("Survivors") +
geom_histogram( position = "identity", alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = mean_train[[metric]],  colour = Survived),
linetype="dashed", size=1)
i=2
ggplot(data = train, aes_string(x = metric, fill = "Survived" )) +
ggtitle(paste(metric, "relevance to Surviving")) +
ylab("Survivors") +
geom_histogram(position = "identity", alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = mean_train[[metric]],  colour = Survived),
linetype="dashed", size=1)
names(mean_train)
metric <- names(mean_train[ - 1])[i]
metric
i=1
ggplot(data = train, aes_string(x = metric, fill = "Survived" )) +
ggtitle(paste(metric, "relevance to Surviving")) +
ylab("Survivors") +
geom_histogram(position = "identity", alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = mean_train[[metric]],  colour = Survived),
linetype="dashed", size=1)
ggplot(data = train, aes(x = metric, fill = Survived )) +
geom_density(alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = mean_train[[metric]],  colour = Survived ),
linetype="dashed", size=1)
mean_train
ggplot(data = train, aes_string(x = metric, fill = "Survived" )) +
ggtitle(paste("Histogram -", metric, "relevance to Surviving")) +
ylab("Survivors") +
geom_histogram(position = "identity", alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = mean_train[[metric]],  colour = Survived),
linetype="dashed", size=1)
i=1
metric <- names(mean_train[ - 1])[i]
metric
ggplot(data = train, aes_string(x = metric, fill = "Survived" )) +
ggtitle(paste("Histogram -", metric, "relevance to Surviving")) +
ylab("Survivors") +
geom_histogram(position = "identity", alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = mean_train[[metric]],  colour = Survived),
linetype="dashed", size=1)
names(mean_train[ - 1])
ggplot(data = train, aes_string(x = metric, fill = "Survived" )) +
ggtitle(paste("Histogram -", metric, "relevance to Surviving")) +
ylab("Survivors") +
geom_histogram(binwidth = 15, position = "identity", alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = mean_train[[metric]],  colour = Survived),
linetype="dashed", size=1)
vars <- mean_train[-1]
vars
vars <- names(mean_train[-1])
vars
reactive
runApp('ShinyApp/EDA_TITANIC')
library(plotly)
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
ggplot(data = train, aes_string(x = metric, fill = "Survived" )) +
ggtitle(paste(metric, "relevance to Surviving")) +
ylab("Survivors") +
geom_histogram(binwidth = 15, position = "identity", alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = mean_train[[metric]],  colour = Survived),
linetype="dashed", size=1)
gg_hist <- function(metric) {
# Histogram
ggplot(data = train, aes_string(x = metric, fill = "Survived" )) +
ggtitle(paste(metric, "relevance to Surviving")) +
ylab("Survivors") +
geom_histogram(binwidth = 15, position = "identity", alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = mean_train[[metric]],  colour = Survived),
linetype="dashed", size=1)
}
gg_hist("Age")
ggplotly(gg_hist("Age"))
plot_ly(alpha=0.6) %>%
add_histogram( x = train[[metric]])
plot_ly(alpha=0.6) %>%
add_histogram( x = train[[metric]]) %>%
layout(barmode = "overlay")
train[[metric]]
metric
plot_ly(train[[metric]], alpha=0.6, type = "histogram", color = Survived)
plot_ly(data = train, x = train[[metric]], alpha=0.6, type = "histogram", color = Survived) %>%
add_histogram( x = train[[metric]]) %>%
layout(barmode = "overlay")
plot_ly(data = train, x = train[[metric]], alpha=0.6, type = "histogram", color = Survived)
plot_ly( x = train[[metric]], alpha=0.6, type = "histogram", color = Survived)
plot_ly( x = train, alpha=0.6, type = "histogram", color = Survived)
plot_ly( x = train, alpha=0.6, type = "histogram", color = "Survived")
plot_ly( data = train, x= metric, alpha=0.6, type = "histogram", color = "Survived")
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
paste("Relevance to Surviving")
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
runApp('ShinyApp/EDA_TITANIC')
scatterplotMatrix(~age+Pclass|Survived, data=train , reg.line="" , smoother="", col=Survived , smoother.args=list(col="grey") , cex=1.5 , pch=c(15,16,17) , main="Scatter plot with Three Cylinder Options")
library(RColorBrewer)
scatterplotMatrix(~age+Pclass|Survived, data=train , reg.line="" , smoother="", col=Survived , smoother.args=list(col="grey") , cex=1.5 , pch=c(15,16,17) , main="Scatter plot with Three Cylinder Options")
library(car)
install.packages("car")
scatterplotMatrix(~age+Pclass|Survived, data=train , reg.line="" , smoother="", col=Survived , smoother.args=list(col="grey") , cex=1.5 , pch=c(15,16,17) , main="Scatter plot with Three Cylinder Options")
install.packages(hplot)
install.packages("hplot")
install.packages("spm")
library(lattice)
scatterplotMatrix(~age+Pclass|Survived, data=train , reg.line="" , smoother="", col=Survived , smoother.args=list(col="grey") , cex=1.5 , pch=c(15,16,17) , main="Scatter plot with Three Cylinder Options")
library(car)
scatterplotMatrix(~age+Pclass|Survived, data=train , reg.line="" , smoother="", col=Survived , smoother.args=list(col="grey") , cex=1.5 , pch=c(15,16,17) , main="Scatter plot with Three Cylinder Options")
scatterplotMatrix(~Age+Pclass|Survived, data=train , reg.line="" , smoother="", col=Survived , smoother.args=list(col="grey") , cex=1.5 , pch=c(15,16,17) , main="Scatter plot with Three Cylinder Options")
scatterplotMatrix(~Age+Pclass|"Survived", data=train , reg.line="" , smoother="", col=Survived , smoother.args=list(col="grey") , cex=1.5 , pch=c(15,16,17) , main="Scatter plot with Three Cylinder Options")
