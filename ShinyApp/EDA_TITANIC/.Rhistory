#
# #Plotting evolution per week:
#
# plot_country <- function() {
#     sql = "SELECT week,
#     q10,
#     q50,
#     q90,
#     offers,
#     country
#
#     FROM reporting.report_liquidity_country
#
#     WHERE week>= '2016-12'
#     and week< DATE_FORMAT(CURRENT_DATE, '%Y-%v')
#     and week != '2016-53'
#     and week != '2017-52'
#
#     ORDER BY week
#     "
#
#     data_total <- getDataSql(sql, "reporting")
#     par(mfrow = c(2, 2), mgp  =  c(1.8, 0.5, 0), mar = c(3, 3.5, 3, 3), oma = c(3.7, 0, 1.6, 0))
#     ymax_offer <- max(data_total$offers)
#     ymax <- max(data_total$q90)
#     country <- c("ES", "FR", "IT", "MX")
#     for (i in 1:length(country)) {
#       data <- data_total[which(data_total$country == country[i]), ]
#
#       plot(1:length(data[ , 5]), data[ , 5],
#            type = "h", main = country[i] ,
#            ylim = c(0, ymax_offer), ylab = "Offers", xlab = "", xaxt = 'n',
#            col = "steelblue",
#            axes = FALSE, lwd = 6, cex.main = 1.5)
#       axis(side = 2)
#
#
#       for (k in 2:4) {
#         if (k == 2) col = "red2"
#         if (k == 3) col = "goldenrod1"
#         if (k == 4) col = "green3"
#         par(new = T)
#         plot(1:length(data[ , k]), data[ , k], type = "o", ylim = c(0, ymax),
#              ylab = "", xlab = "", xaxt = 'n',
#              pch = 19, cex = 0.5, col = col, axes = FALSE, lwd = 1.4)
#       }
#       axis(side = 4)
#       axis(side  =  1,
#            at  =  1:length(data[ , 1]),
#            las = 2,
#            labels  =  data[ , 1],
#            #col.axis = "darkgray",
#            font.axis = 1, cex.axis = 0.6)
#
#     }
#     par(mfrow = c(5, 1), oma = c(0, 0, 1.8, 0), mar = c(0, 0, 0, 0), mgp = c(0, 0, 0))
#     title("Liquidity evolution per week", outer = TRUE, cex.main = 1.7)
#     legend(x  =  "bottom",
#            legend  =  c("Offers", "Percentil 10", "Mediana", "Percentil 90"),
#            col = c("steelblue", "red2", "goldenrod1", "green3"), inset = c(0, -0.17), bty = 'n',
#            lwd = 5, cex = 1.2, horiz  =  TRUE, xpd = TRUE)
#   }
pdf('C:/Users/marin/Documents/liq_week.pdf',width=15, height=9,title="LiquidityCountry",paper='a4r')
liquidity_weekly(start_date=NULL,end_date=NULL,nosector.omit=FALSE)
dev.off()
len <- 50
fibvals <- numeric(len)
fibvals[1] <- 1
fibvals[2] <- 1
for (i in 3:len) {
fibvals[i] <- fibvals[i-1]+fibvals[i-2]
}
fivals
fibvals
fibvals > 1000
fivals[fibvals > 1000]
fibvals[fibvals > 1000]
sum(fibvals[fibvals > 1000][1:10])
n1<-0
n2<-1
i<-1
while (n2<=1000) {
out<-n2
n2<-n1+n2
n1<-out
i=i+1
}
# Compute the next 10 numbers
larger1000<-integer(length=10)
larger1000[1]<-n2
for (i in 2:10) {
out<-n2
n2<-n1+n2
n1<-out
larger1000[i]<-n2
}
# Show the sum
sum(larger1000)
sum(fibvals[fibvals > 1000][1:10])
getDataRedshift <- function (query, encoding) {
require(RJDBC)
driver <- JDBC("com.amazon.redshift.jdbc41.Driver", "RedshiftJDBC41-1.2.1.1001.jar", identifier.quote="`") #asegurarse de que el driver esta en el working directory
url <- "jdbc:redshift://bi-events.cypuotd5so4b.eu-west-1.redshift.amazonaws.com:5439/app_db?user=bicornerjob&password=lIf8o8&*HE#5"
con <- dbConnect(driver, url)
result <- dbGetQuery(con, query)
if (encoding == TRUE) Encoding(result$companyname) <-'UTF-8'
dbDisconnect(con)
rm(con)
return(result)
}
getData <- function( ) {
query <- "
SELECT  *
from liquidity.master_data
where region = 'Catalunya' "
query <- gsub("\n"," ",query)
query <- gsub("\t"," ",query)
data <- getDataRedshift(query, FALSE)
data.table(data)
}
getData()
getDataRedshift <- function (query, encoding) {
require(RJDBC)
driver <- JDBC("com.amazon.redshift.jdbc41.Driver", "RedshiftJDBC41-1.2.1.1001.jar", identifier.quote="`") #asegurarse de que el driver esta en el working directory
url <- "jdbc:redshift://bi-events.cypuotd5so4b.eu-west-1.redshift.amazonaws.com:5439/app_db?user=bicornerjob&password=lIf8o8&*HE#5"
con <- dbConnect(driver, url)
result <- dbGetQuery(con, query)
if (encoding == TRUE) Encoding(result$companyname) <-'UTF-8'
dbDisconnect(con)
rm(con)
return(result)
}
getData <- function( ) {
query <- "
SELECT  *
from liquidity.master_data
where region = 'Catalunya' "
query <- gsub("\n"," ",query)
query <- gsub("\t"," ",query)
data <- getDataRedshift(query, FALSE)
data.table(data)
}
getData()
getData <- function( ) {
query <- "
SELECT  *
from liquidity.master_data
where region = "Catalunya" "
query <- gsub("\n"," ",query)
query <- gsub("\t"," ",query)
data <- getDataRedshift(query, FALSE)
data.table(data)
}
getData()
getDataRedshift <- function (query, encoding) {
require(RJDBC)
driver <- JDBC("com.amazon.redshift.jdbc41.Driver", "RedshiftJDBC41-1.2.1.1001.jar", identifier.quote="`") #asegurarse de que el driver esta en el working directory
url <- "jdbc:redshift://bi-events.cypuotd5so4b.eu-west-1.redshift.amazonaws.com:5439/app_db?user=bicornerjob&password=lIf8o8&*HE#5"
con <- dbConnect(driver, url)
result <- dbGetQuery(con, query)
if (encoding == TRUE) Encoding(result$companyname) <-'UTF-8'
dbDisconnect(con)
rm(con)
return(result)
}
getData <- function( ) {
query <- "
SELECT  *
from liquidity.master_data
where region = 'Catalunya' "
query <- gsub("\n"," ",query)
query <- gsub("\t"," ",query)
data <- getDataRedshift(query, FALSE)
data.table(data)
}
getData()
getData <- function( ) {
query <- "
SELECT  *
from liquidity.master_data "
query <- gsub("\n"," ",query)
query <- gsub("\t"," ",query)
data <- getDataRedshift(query, FALSE)
data.table(data)
}
getData()
getDataRedshift <- function (query, encoding) {
require(RJDBC)
driver <- JDBC("com.amazon.redshift.jdbc41.Driver", "RedshiftJDBC41-1.2.1.1001.jar", identifier.quote="`") #asegurarse de que el driver esta en el working directory
url <- "jdbc:redshift://bi-events.cypuotd5so4b.eu-west-1.redshift.amazonaws.com:5439/app_db?user=bicornerjob&password=lIf8o8&*HE#5"
con <- dbConnect(driver, url)
result <- dbGetQuery(con, query)
if (encoding == TRUE) Encoding(result$companyname) <-'UTF-8'
dbDisconnect(con)
rm(con)
return(result)
}
getData <- function( ) {
query <- "
SELECT  *
from liquidity.master_data "
query <- gsub("\n"," ",query)
query <- gsub("\t"," ",query)
data <- getDataRedshift(query, FALSE)
data.table(data)
}
getData()
getDataSql <- function (query, encoding) {
require(RJDBC)
driver <- JDBC("com.amazon.redshift.jdbc41.Driver", "RedshiftJDBC41-1.2.1.1001.jar", identifier.quote="`") #asegurarse de que el driver esta en el working directory
url <- "jdbc:redshift://bi-events.cypuotd5so4b.eu-west-1.redshift.amazonaws.com:5439/app_db?user=tableau&password=10X20son200!"
con <- dbConnect(driver, url)
result <- dbGetQuery(con, query)
if (encoding == TRUE) Encoding(result$companyname) <-'UTF-8'
dbDisconnect(con)
rm(con)
return(result)
}
getData()
shiny::runApp('Titanic/ShinyApp/EDA_TITANIC')
runApp('Titanic/ShinyApp/EDA_TITANIC')
runApp('Titanic/ShinyApp/EDA_TITANIC')
runApp('Titanic/ShinyApp/EDA_TITANIC')
runApp('Titanic/ShinyApp/EDA_TITANIC')
library(shinydashboard)
runApp('Titanic/ShinyApp/EDA_TITANIC')
runApp('Titanic/ShinyApp/EDA_TITANIC')
runApp('Titanic/ShinyApp/EDA_TITANIC')
setwd("~/Titanic/ShinyApp/EDA_TITANIC")
fread("Data/train.csv", stringsAsFactors= TRUE)
runApp()
runApp()
fread("Data/train.csv", stringsAsFactors= TRUE)
runApp()
runApp()
runApp()
setwd("~/Titanic/ShinyApp/EDA_TITANIC")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
train <- fread("Data/train.csv", stringsAsFactors= TRUE)
runApp()
int_to_factor <- which(rapply( train, is.integer) )[-1]
train[ , int_to_factor] <- train[ , lapply(.SD, factor), .SDcols=int_to_factor]
mean_train <- ddply(train, .(Survived), numcolwise(mean, na.rm= T))
metric_hist <- names(mean_train[-1])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
metric
train %>%
group_by(Age) %>%
summarize(count = n()) %>%
plot_ly(labels = ~Age, values = ~count) %>%
add_pie(hole = 0.5) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p <- train %>%
group_by(Age) %>%
summarize(count = n()) %>%
plot_ly(labels = ~Age, values = ~count) %>%
add_pie(hole = 0.5) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
train %>%
group_by(Age)
train %>%
group_by(Age) %>%
summarize(count = n())
train[["Age"]] %>%
group_by(Age)
train %>%
group_by(Age) %>%
summarize(count = n()) %>%
plot_ly(labels = ~Age, values = ~count) %>%
add_pie(hole = 0.5) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
library(plotly)
train %>%
group_by(Age) %>%
summarize(count = n()) %>%
plot_ly(labels = ~Age, values = ~count) %>%
add_pie(hole = 0.5) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
as.data.frame(train) %>%
group_by(Age)
as.data.frame(train) %>%
group_by(Age) %>%
summarize(count = n())
as.data.frame(train) %>%
group_by(Age) %>%
summarize(count = ~n())
as.data.frame(train) %>%
group_by(Age) %>%
summarize()
as.data.frame(train) %>%
group_by(Age) %>%
summarize(count = ~n())
as.data.frame(train) %>%
group_by(Age) %>%
summarize_(count = ~n())
as.data.frame(train) %>%
group_by(Age) %>%
summarise_(count = n())
as.data.frame(train) %>%
group_by(Age) %>%
summarise_(count = ~n())
as.data.frame(train) %>%
group_by(Age) %>%
summarise_(count = ~n()) %>%
plot_ly(labels = ~Age, values = ~count) %>%
add_pie(hole = 0.5) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
train[ , age_group := if(Age < 12) {"child"} else 0, ]
train[ , age_group := ifelse(Age < 12, "child", ifelse( Age < 18, "teenager", ifelse (Age < 65, "adult", "senior") ) ) , ]
train
as.data.frame(train) %>%
group_by(age_group) %>%
summarise_(count = ~n()) %>%
plot_ly(labels = ~age_group, values = ~count) %>%
add_pie(hole = 0.5) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
metric="Age"
ggplot(data = train, aes_string(x = metric, fill = "Survived" )) +
ylab("Survivors") +
geom_histogram(binwidth = 15, position = "identity", alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = mean_train[[metric]],  colour = Survived),
linetype="dashed", size=1)
ggplot(data = train, aes_string(x = age_group, fill = "Survived" )) +
ylab("Survivors") +
geom_histogram( position = "identity", alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = mean_train[[metric]],  colour = Survived),
linetype="dashed", size=1)
train
ggplot(data = train, aes_string(x = "age_group", fill = "Survived" )) +
ylab("Survivors") +
geom_histogram( position = "identity", alpha = .5, na.rm=TRUE) +
geom_vline(data = mean_train, aes(xintercept = mean_train[[metric]],  colour = Survived),
linetype="dashed", size=1)
as.data.frame(train) %>%
group_by(metric) %>%
summarise_(count = ~n()) %>%
plot_ly(labels = ~metric, values = ~count) %>%
add_pie(hole = 0.5) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
metric = "Pclass"
as.data.frame(train) %>%
group_by(metric) %>%
summarise_(count = ~n()) %>%
plot_ly(labels = ~metric, values = ~count) %>%
add_pie(hole = 0.5) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
metric
as.data.frame(train) %>%
group_by(metric) %>%
summarise_(count = ~n()) %>%
plot_ly(labels = ~metric, values = ~count) %>%
add_pie(hole = 0.5) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
as.data.frame(train) %>%
group_by(metric) %>%
summarise_(count = ~n()) %>%
plot_ly(labels = metric, values = ~count) %>%
add_pie(hole = 0.5) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
as.data.frame(train) %>%
group_by(Pclass) %>%
summarise_(count = ~n()) %>%
plot_ly(labels = Pclass, values = ~count) %>%
add_pie(hole = 0.5) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
train
as.data.frame(train) %>%
group_by(Pclass) %>%
summarise_(count = ~n())
as.data.frame(train) %>%
group_by(Pclass) %>%
summarise_(count = ~n()) %>%
plot_ly(labels = Pclass, values = ~count)
as.data.frame(train) %>%
group_by(Pclass) %>%
summarise_(count = ~n()) %>%
plot_ly(labels = "Pclass", values = ~count)
as.data.frame(train) %>%
group_by(Pclass) %>%
summarise_(count = ~n()) %>%
plot_ly(labels = "Pclass", values = ~count) %>%
add_pie(hole = 0.5) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
as.data.frame(train) %>%
group_by(Pclass) %>%
summarise_(count = ~n())
as.data.frame(train) %>%
group_by(Pclass) %>%
summarise_(count = ~n()) %>%
plot_ly(labels = "Pclass", values = "count")
as.data.frame(train) %>%
group_by(Pclass) %>%
summarise_(count = ~n())
as.data.frame(train) %>%
group_by(Pclass) %>%
summarise_(count = ~n()) %>%
plot_ly(labels = ~Pclass, values = ~count)
as.data.frame(train) %>%
group_by(Pclass) %>%
summarise_(count = ~n()) %>%
plot_ly(labels = Pclass, values = ~count) %>%
add_pie(hole = 0.5) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
as.data.frame(train) %>%
group_by(Pclass) %>%
summarise_(count = ~n()) %>%
plot_ly(labels = ~Pclass, values = ~count)
as.data.frame(age_group) %>%
group_by(age_group) %>%
summarise_(count = ~n()) %>%
plot_ly(labels = ~Pclass, values = ~count)
as.data.frame(train) %>%
group_by(age_group) %>%
summarise_(count = ~n())
as.data.frame(train) %>%
group_by(age_group) %>%
summarise_(count = ~n()) %>%
plot_ly(labels = ~Pclass, values = ~count)
as.data.frame(train) %>%
group_by(age_group) %>%
summarise_(count = ~n()) %>%
plot_ly(labels = ~age_group, values = ~count)
as.data.frame(train) %>%
group_by(age_group) %>%
summarise_(count = ~n()) %>%
plot_ly(labels = ~age_group, values = ~count) %>%
add_pie(hole = 0.5) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
as.data.frame(train) %>%
group_by(Pclass) %>%
summarise_(count = ~n()) %>%
plot_ly(labels = ~Pclass, values = ~count) %>%
add_pie(hole = 0.5) %>%
layout(title = "Donut charts using Plotly",  showlegend = F,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
metric = "Pclass"
as.data.frame(train) %>%
group_by(age_group) %>%
summarise_(count = ~n()) %>%
plot_ly(labels = ~age_group, values = ~count) %>%
add_pie(hole = 0.5) %>%
layout(title = "Donut charts using Plotly",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
as.data.frame(train) %>%
group_by(Pclass) %>%
summarise_(count = ~n()) %>%
plot_ly(labels = ~Pclass, values = ~count) %>%
add_pie(hole = 0.5) %>%
layout(title = "Donut charts using Plotly",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot()
runApp()
runApp()
runApp()
